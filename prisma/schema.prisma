generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Applicant {
  id        String   @id @default(uuid()) // Change to String
  name      String
  email     String   @unique
  resume    String? // Optional link to the resume
  appliedAt DateTime @default(now()) // Date and time when the application was submitted
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
}

model User {
  id            String    @id @default(uuid()) // Change to String
  name          String?
  image         String?
  email         String    @unique
  password      String?
  role          String    @default("USER")
  emailVerified DateTime? // Ensure this is present
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
}

model Post {
  id             Int         @id @default(autoincrement())
  position       String // Name of the job position
  description    String // Job description
  createdAt      DateTime    @default(now()) // Date and time when the post was created
  updatedAt      DateTime    @updatedAt // Automatically updates the time when the post is edited
  location       String // Job location (e.g., remote, hybrid, onsite)
  jobType        JobType // Full-time, Part-time, Internship, etc.
  salary         Float? // Optional field for salary
  hiringManager  String // Name of the hiring manager
  companyName    String // Name of the company offering the job
  applicationUrl String? // Link to the application page (if any)
  applicants     Applicant[] // Relationship with applicants who applied for the job
  // Optional fields
  skillsRequired String[] // List of required skills for the job
  status         JobStatus   @default(ACTIVE) // ACTIVE, CLOSED, etc.
  User           User?       @relation(fields: [userId], references: [id])
  userId         String?
}

enum JobType {
  FULL_TIME
  PART_TIME
  INTERNSHIP
  CONTRACT
  FREELANCE
}

enum JobStatus {
  ACTIVE
  CLOSED
}

// NextAuth models

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // Optional refresh token
  access_token      String? // Optional access token
  expires_at        Int? // Optional expiration time
  token_type        String? // Optional token type
  scope             String? // Optional scope
  id_token          String? // Optional ID token
  session_state     String? // Optional session state

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}
